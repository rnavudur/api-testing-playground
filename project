# Overview

This is a full-stack AI-powered API testing playground built with React and Express. Unlike basic tools like Postman, it includes intelligent features like API suggestions, request templates, live performance analysis, and response comparison. The application provides a comprehensive testing environment with syntax-highlighted responses, security scoring, and smart recommendations.

## Recent Updates (August 2025)
- **Complete Authentication System**: Signup, login, logout with PostgreSQL and bcryptjs encryption
- **Demo Account Functionality**: One-click demo access (demo@apiplayground.com / demo123)
- **Purple/Blue Gradient UI**: Updated from slate to modern purple/blue/indigo gradients
- **Smooth Animations**: Floating icons, gradient movement, hover scales, and glow effects
- **Fixed User Display**: Proper username/full name display in header dropdown
- **Enhanced Routing**: Authentication-aware routing with proper redirects
- **Backdrop Blur Effects**: Modern glassmorphism design with sticky headers

# User Preferences

Preferred communication style: Simple, everyday language.

# System Architecture

## Frontend Architecture
- **React Single Page Application**: Uses React 18 with TypeScript for type safety
- **Routing**: Wouter for lightweight client-side routing
- **State Management**: TanStack Query for server state management and caching
- **UI Framework**: shadcn/ui components with Radix UI primitives for accessibility
- **Styling**: Tailwind CSS with CSS variables for theming support
- **Build Tool**: Vite for fast development and optimized production builds

## Backend Architecture
- **Express.js Server**: RESTful API server with middleware for request logging
- **Proxy Architecture**: Acts as a CORS proxy for making external API requests
- **Request Storage**: In-memory storage system using Map data structures for request history
- **Schema Validation**: Drizzle-zod for request/response validation
- **Development Integration**: Vite middleware integration for seamless full-stack development

## Data Storage Solutions
- **PostgreSQL Database**: Full database implementation with Neon serverless PostgreSQL
- **User Management**: Complete user authentication with encrypted passwords using bcryptjs
- **Session Storage**: PostgreSQL-backed session storage for secure authentication state
- **API Request History**: All API requests stored in database with user association
- **Schema Design**: Structured tables for users, sessions, and API requests with proper relations

## API Design Patterns
- **Proxy Pattern**: `/api/proxy` endpoint handles external API requests to bypass CORS
- **Request Logging**: Automatic capture and storage of all API interactions
- **Response Formatting**: Consistent response structure with metadata (status, timing, headers)

## External Dependencies
- **Neon Database**: PostgreSQL serverless database (configured but not actively used)
- **Radix UI**: Headless UI components for accessibility and consistency
- **TanStack Query**: Server state management and request caching
- **Axios**: HTTP client for making external API requests
- **Wouter**: Lightweight routing library
- **Tailwind CSS**: Utility-first CSS framework
- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL support
